<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zentao.publish.dao.ISubscribeDao">
    <resultMap id="subscribeMap" type="com.zentao.publish.entity.PubSubscribe">
        <id column="id" property="id" jdbcType="CHAR"/>
        <result column="product_id" property="productId" jdbcType="CHAR"/>
        <result column="project_id" property="projectId" jdbcType="CHAR"/>
        <result column="product_sub_path" property="productSubPath" jdbcType="VARCHAR"/>
        <result column="last_product_version" property="lastProductVersion" jdbcType="VARCHAR"/>
        <result column="last_product_time" property="lastProductTime"/>
        <result column="create_time" property="createTime"/>
        <result column="modify_time" property="modifyTime"/>
    </resultMap>

    <insert id="create" keyProperty="id" keyColumn="id">
        insert into pub_subscribe (id,
                                   product_id,
                                   project_id,
                                   product_sub_path,
                                   last_product_version,
                                   create_time)
        values (#{id},
                #{productId},
                #{projectId},
                #{productSubPath},
                #{lastProductVersion},
                #{createTime})
    </insert>

    <update id="update">
        update pub_subscribe
        set product_id           = #{productId},
            project_id           = #{projectId},
            product_sub_path     = #{productSubPath},
            last_product_version = #{lastProductVersion},
            last_product_time    = #{lastProductTime},
            modify_time          = #{modifyTime}
        where id = #{id}
    </update>

    <delete id="delete">
        delete
        from pub_subscribe
        where id = #{id}
    </delete>

    <select id="getAll" resultMap="subscribeMap">
        select *
        from pub_subscribe
        order by create_time desc
    </select>

    <select id="getById" resultMap="subscribeMap">
        select *
        from pub_subscribe
        where id = #{id}
    </select>

    <select id="getByProduct" resultMap="subscribeMap">
        select *
        from pub_subscribe
        where product_id = #{productId}
        order by create_time
    </select>

    <select id="getByProject" resultMap="subscribeMap">
        select *
        from pub_subscribe
        where project_id = #{projectId}
        order by create_time
    </select>

    <delete id="deleteByProduct">
        delete
        from pub_subscribe
        where product_id = #{productId}
    </delete>

    <delete id="deleteByProject">
        delete
        from pub_subscribe
        where project_id = #{projectId}
    </delete>

    <select id="getPage" resultMap="subscribeMap">
        select * from pub_subscribe
        <where>
            <if test="null != productId and productId != ''">
                and product_id = #{productId}
            </if>
            <if test="null != projectId and projectId != ''">
                and project_id = #{projectId}
            </if>
            <if test="null != lastProductVersion and lastProductVersion != ''">
                and last_product_version like concat('%', #{lastProductVersion}, '%')
            </if>
        </where>
    </select>
</mapper>